/**
 * Download Instagram usando API Cognima
 * Updated to use cog2.cognima.com.br API
 */

import axios from 'axios';

// Sistema de cache para controlar avisos di√°rios de API key
const dailyNotifications = {
  count: 0,
  date: null,
  maxNotifications: 3
};

// Fun√ß√£o para verificar se pode enviar notifica√ß√£o
function canSendNotification() {
  const today = new Date().toDateString();
  
  // Reset contador se mudou o dia
  if (dailyNotifications.date !== today) {
    dailyNotifications.count = 0;
    dailyNotifications.date = today;
  }
  
  return dailyNotifications.count < dailyNotifications.maxNotifications;
}

// Fun√ß√£o para incrementar contador de notifica√ß√µes
function incrementNotificationCount() {
  dailyNotifications.count++;
}

// Fun√ß√£o para verificar se a API key √© v√°lida
function isApiKeyError(error) {
  if (!error) return false;
  
  const errorMessage = (error.message || '').toLowerCase();
  const statusCode = error.response?.status;
  const responseData = error.response?.data;
  
  const authErrorCodes = [401, 403, 429];
  
  const keyErrorMessages = [
    'api key',
    'unauthorized',
    'invalid token',
    'authentication failed',
    'access denied',
    'quota exceeded',
    'rate limit',
    'forbidden',
    'token expired',
    'invalid credentials'
  ];
  
  if (authErrorCodes.includes(statusCode)) {
    return true;
  }
  
  if (keyErrorMessages.some(msg => errorMessage.includes(msg))) {
    return true;
  }
  
  if (responseData && typeof responseData === 'object') {
    const responseString = JSON.stringify(responseData).toLowerCase();
    if (keyErrorMessages.some(msg => responseString.includes(msg))) {
      return true;
    }
  }
  
  return false;
}

// Fun√ß√£o para notificar o dono sobre problemas com a API key
async function notifyOwnerAboutApiKey(nazu, ownerNumber, error, command) {
  try {
    // Verificar se pode enviar notifica√ß√£o
    if (!canSendNotification()) {
      // Se j√° atingiu o limite, enviar mensagem de limite apenas uma vez
      if (dailyNotifications.count === dailyNotifications.maxNotifications) {
        const limitMessage = `ÔøΩ *LIMITE DE AVISOS ATINGIDO*

J√° foram enviados ${dailyNotifications.maxNotifications} avisos sobre problemas com API key hoje.

Para evitar spam, n√£o enviarei mais notifica√ß√µes at√© amanh√£.

üîß *Verifique a API key do Instagram (Cognima) quando poss√≠vel.*`;

        const ownerId = ownerNumber?.replace(/[^\d]/g, '') + '@s.whatsapp.net';
        await nazu.sendText(ownerId, limitMessage);
        incrementNotificationCount(); // Incrementa para n√£o enviar novamente
      }
      return;
    }

    const message = `ÔøΩüö® *ALERTA - PROBLEMA COM API KEY INSTAGRAM* üö®

üìã *O que √© API Key?*
Uma API Key √© como uma "senha especial" que permite ao bot acessar os servi√ßos do Instagram atrav√©s da plataforma Cognima. √â necess√°ria para baixar fotos e v√≠deos.

‚ö†Ô∏è *Problema detectado:*
‚Ä¢ *Comando afetado:* ${command}
‚Ä¢ *Erro espec√≠fico:* ${error || 'Chave inv√°lida ou expirada'}
‚Ä¢ *Data/Hora:* ${new Date().toLocaleString('pt-BR')}
‚Ä¢ *Aviso:* ${dailyNotifications.count + 1}/${dailyNotifications.maxNotifications} de hoje

ÔøΩ *Informa√ß√µes da API Cognima:*
‚Ä¢ Oferece 150 requisi√ß√µes GRATUITAS por dia
‚Ä¢ Ap√≥s esgotar, √© necess√°rio adquirir um plano pago
‚Ä¢ Para adquirir: wa.me/553399285117
‚Ä¢ Painel: https://cog2.cognima.com.br

üîß *Poss√≠veis causas e solu√ß√µes:*
1Ô∏è‚É£ *API Key expirada* ‚Üí Renovar no painel Cognima
2Ô∏è‚É£ *Limite de 150 requisi√ß√µes esgotado* ‚Üí Aguardar pr√≥ximo dia ou adquirir via WhatsApp
3Ô∏è‚É£ *Chave incorreta* ‚Üí Verificar se est√° correta no config.json
4Ô∏è‚É£ *Problema tempor√°rio do servidor* ‚Üí Aguardar alguns minutos

üìä *Como verificar:*
‚Ä¢ Acesse: https://cog2.cognima.com.br/dashboard
‚Ä¢ Verifique o status da sua API Key
‚Ä¢ Confira quantas requisi√ß√µes restam

‚öôÔ∏è *Para corrigir:*
‚Ä¢ Use o comando: !apikey suachave
‚Ä¢ Exemplo: !apikey ABC123XYZ789
‚Ä¢ Reinicie o bot ap√≥s configurar

üí¨ Voc√™ receber√° no m√°ximo 3 avisos por dia para evitar spam.`;

    const ownerId = ownerNumber?.replace(/[^\d]/g, '') + '@s.whatsapp.net';
    await nazu.sendText(ownerId, message);
    
    // Incrementar contador ap√≥s envio bem-sucedido
    incrementNotificationCount();
    
    console.log('üìß Notifica√ß√£o sobre API key enviada ao dono');
  } catch (notifyError) {
    console.error('‚ùå Erro ao notificar dono sobre API key:', notifyError.message);
  }
}

// Fun√ß√£o para baixar post do Instagram
async function igdl(url, apiKey) {
  try {
    if (!apiKey) {
      throw new Error('API key n√£o fornecida');
    }

    const response = await axios.post('https://cog2.cognima.com.br/api/v1/instagram/download', {
      url: url
    }, {
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': apiKey
      },
      timeout: 30000
    });

    if (!response.data.success || !response.data.data) {
      throw new Error('Resposta inv√°lida da API');
    }

    const apiData = response.data.data;
    
    // Processar os dados para baixar os buffers
    const results = [];
    
    if (apiData.media && Array.isArray(apiData.media)) {
      for (const mediaItem of apiData.media) {
        try {
          // Baixar o conte√∫do da m√≠dia
          const mediaResponse = await axios.get(mediaItem.url, { 
            responseType: 'arraybuffer',
            timeout: 60000
          });
          
          results.push({
            type: mediaItem.type || 'image', // 'video' ou 'image'
            buff: mediaResponse.data,
            url: mediaItem.url,
            mime: mediaItem.mime || 'application/octet-stream'
          });
        } catch (downloadError) {
          console.error('Erro ao baixar m√≠dia do Instagram:', downloadError.message);
          // Continua com as outras m√≠dias mesmo se uma falhar
        }
      }
    }

    if (results.length === 0) {
      throw new Error('Nenhuma m√≠dia foi baixada com sucesso');
    }

    return {
      ok: true,
      criador: 'Hiudy',
      data: results,
      count: apiData.count || results.length
    };

  } catch (error) {
    console.error('Erro no download Instagram:', error.message);
    
    if (isApiKeyError(error)) {
      throw new Error(`API key inv√°lida ou expirada: ${error.response?.data?.message || error.message}`);
    }
    
    return { 
      ok: false, 
      msg: 'Erro ao baixar post: ' + (error.response?.data?.message || error.message) 
    };
  }
}

export default {
  dl: (url, apiKey) => igdl(url, apiKey),
  notifyOwnerAboutApiKey
};